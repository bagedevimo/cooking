# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/clearance/all/clearance.rbi
#
# clearance-2.4.0

module Clearance
  def self.configuration; end
  def self.configuration=(config); end
  def self.configure; end
end
class Clearance::Configuration
  def allow_sign_up=(arg0); end
  def allow_sign_up?; end
  def allowed_backdoor_environments; end
  def allowed_backdoor_environments=(arg0); end
  def cookie_domain; end
  def cookie_domain=(arg0); end
  def cookie_expiration; end
  def cookie_expiration=(arg0); end
  def cookie_name; end
  def cookie_name=(arg0); end
  def cookie_path; end
  def cookie_path=(arg0); end
  def httponly; end
  def httponly=(arg0); end
  def initialize; end
  def mailer_sender; end
  def mailer_sender=(arg0); end
  def parent_controller; end
  def parent_controller=(arg0); end
  def password_strategy; end
  def password_strategy=(arg0); end
  def redirect_url; end
  def redirect_url=(arg0); end
  def reload_user_model; end
  def rotate_csrf_on_sign_in; end
  def rotate_csrf_on_sign_in=(arg0); end
  def rotate_csrf_on_sign_in?; end
  def routes=(arg0); end
  def routes_enabled?; end
  def same_site; end
  def same_site=(arg0); end
  def secure_cookie; end
  def secure_cookie=(arg0); end
  def sign_in_guards; end
  def sign_in_guards=(arg0); end
  def signed_cookie; end
  def signed_cookie=(value); end
  def user_actions; end
  def user_id_parameter; end
  def user_model; end
  def user_model=(arg0); end
  def user_parameter; end
end
class Clearance::SuccessStatus
  def success?; end
end
class Clearance::FailureStatus
  def failure_message; end
  def initialize(failure_message); end
  def success?; end
end
class Clearance::SignInGuard
  def current_user; end
  def failure(message); end
  def initialize(session, stack = nil); end
  def next_guard; end
  def session; end
  def signed_in?; end
  def stack; end
  def success; end
end
class Clearance::DefaultSignInGuard < Clearance::SignInGuard
  def call; end
  def default_failure_message; end
end
class Clearance::Session
  def add_cookie_to_headers; end
  def authentication_successful?; end
  def configured_cookie_domain; end
  def cookie_options(value); end
  def cookies; end
  def current_user; end
  def delete_cookie_options; end
  def domain; end
  def expires_configuration; end
  def initialize(env); end
  def initialize_sign_in_guard_stack; end
  def remember_token; end
  def remember_token_cookie; end
  def remember_token_expires; end
  def request_with_env; end
  def run_sign_in_stack; end
  def set_remember_token(token); end
  def sign_in(user, &block); end
  def sign_out; end
  def signed_in?; end
  def signed_in_with_remember_token?; end
  def signed_out?; end
  def user_from_remember_token(token); end
end
class Clearance::RackSession
  def call(env); end
  def initialize(app); end
end
class Clearance::BackDoor
  def allowed_environments; end
  def call(env); end
  def environment_is_allowed?; end
  def error_message; end
  def find_user(user_param); end
  def initialize(app, &block); end
  def sign_in_through_the_back_door(env); end
end
module Clearance::Authentication
  def authenticate(params); end
  def clearance_session; end
  def current_user; end
  def handle_unverified_request; end
  def sign_in(user, &block); end
  def sign_out; end
  def signed_in?; end
  def signed_out?; end
  extend ActiveSupport::Concern
end
module Clearance::Authorization
  def clear_return_to; end
  def deny_access(flash_message = nil); end
  def redirect_back_or(default); end
  def redirect_request(flash_message); end
  def require_login; end
  def return_to; end
  def return_to_url; end
  def store_location; end
  def url_after_denied_access_when_signed_in; end
  def url_after_denied_access_when_signed_out; end
  extend ActiveSupport::Concern
end
module Clearance::Controller
  extend ActiveSupport::Concern
  include Clearance::Authentication
  include Clearance::Authorization
end
class Clearance::Token
  def self.new; end
end
module Clearance::User
  def email_optional?; end
  def forgot_password!; end
  def generate_confirmation_token; end
  def generate_remember_token; end
  def normalize_email; end
  def password_optional?; end
  def reset_remember_token!; end
  def skip_password_validation?; end
  def update_password(new_password); end
  extend ActiveSupport::Concern
end
module Clearance::User::ClassMethods
  def authenticate(email, password); end
  def find_by_normalized_email(email); end
  def normalize_email(email); end
  def password_strategy; end
  def prevent_timing_attack; end
end
module Clearance::User::Validations
  extend ActiveSupport::Concern
end
module Clearance::User::Callbacks
  extend ActiveSupport::Concern
end
class Clearance::Engine < Rails::Engine
end
module Clearance::PasswordStrategies
end
module Clearance::Constraints
end
class Clearance::Constraints::SignedIn
  def clearance_session; end
  def current_user; end
  def current_user_fulfills_additional_requirements?; end
  def initialize(&block); end
  def matches?(request); end
  def signed_in?; end
end
class Clearance::Constraints::SignedOut
  def clearance_session; end
  def matches?(request); end
  def missing_session?; end
end
module Clearance::PasswordStrategies::BCrypt
  def authenticated?(password); end
  def configured_bcrypt_cost; end
  def password=(new_password); end
end
class ClearanceMailer < ActionMailer::Base
  def _layout(lookup_context, formats); end
  def change_password(user); end
  def self._routes; end
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_36
end
class Clearance::BaseController < ApplicationController
  def _layout(lookup_context, formats); end
  def self._wrapper_options; end
  def self.helpers_path; end
  def self.middleware_stack; end
  include GeneratedUrlHelpers
end
class Clearance::PasswordsController < Clearance::BaseController
  def _layout(lookup_context, formats); end
  def create; end
  def deliver_email(user); end
  def edit; end
  def email_from_password_params; end
  def ensure_email_present; end
  def ensure_existing_user; end
  def find_user_by_id_and_confirmation_token; end
  def find_user_for_create; end
  def find_user_for_edit; end
  def find_user_for_update; end
  def flash_failure_after_update; end
  def flash_failure_when_forbidden; end
  def flash_failure_when_missing_email; end
  def new; end
  def password_from_password_reset_params; end
  def self.__callbacks; end
  def self._wrapper_options; end
  def self.helpers_path; end
  def self.middleware_stack; end
  def update; end
  def url_after_update; end
  include GeneratedUrlHelpers
end
class Clearance::UsersController < Clearance::BaseController
  def _layout(lookup_context, formats); end
  def create; end
  def new; end
  def redirect_signed_in_users; end
  def self.__callbacks; end
  def self._wrapper_options; end
  def self.helpers_path; end
  def self.middleware_stack; end
  def url_after_create; end
  def user_from_params; end
  def user_params; end
  include GeneratedUrlHelpers
end
class Clearance::SessionsController < Clearance::BaseController
  def _layout(lookup_context, formats); end
  def create; end
  def destroy; end
  def new; end
  def redirect_signed_in_users; end
  def self.__callbacks; end
  def self._wrapper_options; end
  def self.helpers_path; end
  def self.middleware_stack; end
  def url_after_create; end
  def url_after_destroy; end
  def url_for_signed_in_users; end
  include GeneratedUrlHelpers
end
